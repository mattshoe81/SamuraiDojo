<div class="container" ng-controller="SenseiController as vm">
    <div class="spacer-25"></div>

    <h3 class="bold">Create your challenge:</h3>
    <ol>
        <li>Create a new folder in SamuraiDojo/Battles with the appropriate week number (just increment from the previous week)</li>
        <li>
            Create a new <span class="bold">ABSTRACT CLASS</span> for your challenge (clever names and puns are encouraged)
            <ul>
                <li>    
                    Decorate your abstract class with the <code>[Battle("XX/XX/XX", "Your Clever battle name", typeof(this))]</code> attribute
                    <ul>
                        <li>The first parameter is the Deadline, which should be the Friday after the battle is announced. (The date format is pretty free-form, just put the MM/DD/YY)</li>
                        <li>The second parameter is the name of your battle (cleverness and puns encouraged)</li>
                        <li>The third parameter is just the Type of the class to which the attribute is attached</li>
                    </ul>
                </li>
                <li>Decorate your abstract class with the <code>[Sensei(Samurai.YOU)]</code> attribute</li>
                <li>Do <span class="bold">NOT</span> use an <span class="bold">interface</span>. Attributes are not inherited from interfaces, so the reflection used for scoring will break if you use an interface.</li>
            </ul>
        </li>
        <li>In your abstract class, create a method for each challenge you wish to assign for the week, and give each one an xml summary in which you exhaustively define the challenge.</li>
        <li>
            Extend your abstract class and provide an empty implementation as an example for players to follow.
            <ul>
                <li>Decorate this class with the <code>[WrittenBy(Samurai.YOU)]</code> attribute</li>
            </ul>
        </li>    
        <li>
            Copy all of the text of your class, navigate to the index.cshtml page, and paste it into the &#x3C;pre&#x3E;&#x3C;code&#x3E;&#x3C;/code&#x3E;&#x3C;/pre&#x3E; tags on the page (Replace the existing text completely)
            <ul>
                <li>You can html-encode this if you like, but the &lt; and &gt; symbols won't cause any trouble</li>
            </ul>
        </li>
    </ol>

    <h3 class="bold">Create a test suite:</h3>
    <ol>
        <li>Create a new folder at the root of the SamuraiDojo.Test project with the appropriate week number (same as your battle folder)</li>
        <li>
            Create a new unit test class and mark it as <span class="bold">ABSTRACT and name it with a similar name as your challenge class</span>
            <ul>
                <li>Decorate this class with the <code>[UnderTest(typeof({battle}))]</code> attribute, where <code>{battle}</code> is the type of the abstract class in which you defined the challenge. This is necessary for the reflection used to assign points by battle.</li>
                <li>Make sure this class also has the <code>[TestClass]</code> attribute</li>
            </ul>
        </li>
        <li>
            Define a single abstract method as <code>protected abstract {battleType} GetInstance()</code>, where <code>{battleType}</code> is the abstract type of the challenge you created.
            <ul>
                <li>Use this to get implementations of the challenge while you write your tests</li>
                <li>Each person who writes unit tests will implement this method, allowing you to write one set of tests that everyone can use.</li>
            </ul>
        </li>
        <li>
            Extend the <code>DojoTest</code> class in your abstract unit test class
            <ul>
                <li>This will require you to implement a <code>public override void Benchmark()</code> method.</li>
                <li>The <code>Benchmark()</code> method should be a test case that is moderately computationally intensive. It is used to gauge algorithm efficiency, so use large data sets or however computational intensity can be achieved.</li>
                <li>Ensure the <code>Benchmark()</code> method is decorated with the <code>[TestMethod]</code> attribute</li>
            </ul>
        </li>
        <li>
            Write as many unit tests as you deem fit, keeping in mind that players will get 1 point for every test they pass.
            <ul>
                <li>Do your best to come up with tests that will be able to poke and prod the edge cases and potential pitfalls of implementations.</li>
            </ul>
        </li>
        <li>
            Extend your abstract base test class and override the <code>GetInstance</code> method, returning your dummy algorithm implementation
            <ul>
                <li>Decorate this class with the <code>[WrittenBy(Samurai.YOU)]</code> attribute</li>
                <li>Players will use this as a template to plug their algorithm into the test suite</li>
            </ul>
        </li>
    </ol>

    <h3 class="bold">Set up Benchmarking:</h3>
    <ol>
        <li>Create a new class in the SamuraiDojo.Benchmarking/Benchmarks folder with the appropriate week number</li>
        <li>
            Decorate the class with the <code>[MemoryDiagnoser]</code> attribute
            <ul>
                <li>This allows BenchmarkDotNet to analyze memory allocation for each person's implementation</li>
            </ul>
        </li>
        <li>Extend the <code>DojoBenchmark</code> class</li>
        <li>
            Implement a method with your name and decorate it with the <code>[Benchmark(Baseline = true)]</code> attribute
            <ul>
                <li>ONLY call the base.Run method and pass in an instance of your test class (not the abstract class, use your concrete class in which the GetInstance() method is overridden)</li>
            </ul>
        </li>
        <li>
            After you have merged everyone's solution into the master branch, do the exact same thing for each person who submitted a solution, EXCEPT:
            <ul>
                <li>Only decorate their methods with the <code>[Benchmark]</code> attribute.</li>
                <li>Pass in an instance of their test implementation to the base.Run method</li>
            </ul>
        </li>
        <li>
            Open the <code>BenchmarkEngine</code> class in the <code>SamuraiDojo.Benchmarking</code> project
            <ul>
                <li>You need to map the benchmarking class you created for this week to your challenge you set up in the <span class="bold italic">Create your challenge</span> section</li>
                <li>There will be multiple others for you to use as an example, but the Key has to be your battle class, and the value has to be your benchmarking class</li>
            </ul>
        </li>
    </ol>

</div>
